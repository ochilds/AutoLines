//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.13.1
//     from Assets/Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

/// <summary>
/// Provides programmatic access to <see cref="InputActionAsset" />, <see cref="InputActionMap" />, <see cref="InputAction" /> and <see cref="InputControlScheme" /> instances defined in asset "Assets/Controls.inputactions".
/// </summary>
/// <remarks>
/// This class is source generated and any manual edits will be discarded if the associated asset is reimported or modified.
/// </remarks>
/// <example>
/// <code>
/// using namespace UnityEngine;
/// using UnityEngine.InputSystem;
///
/// // Example of using an InputActionMap named "Player" from a UnityEngine.MonoBehaviour implementing callback interface.
/// public class Example : MonoBehaviour, MyActions.IPlayerActions
/// {
///     private MyActions_Actions m_Actions;                  // Source code representation of asset.
///     private MyActions_Actions.PlayerActions m_Player;     // Source code representation of action map.
///
///     void Awake()
///     {
///         m_Actions = new MyActions_Actions();              // Create asset object.
///         m_Player = m_Actions.Player;                      // Extract action map object.
///         m_Player.AddCallbacks(this);                      // Register callback interface IPlayerActions.
///     }
///
///     void OnDestroy()
///     {
///         m_Actions.Dispose();                              // Destroy asset object.
///     }
///
///     void OnEnable()
///     {
///         m_Player.Enable();                                // Enable all actions within map.
///     }
///
///     void OnDisable()
///     {
///         m_Player.Disable();                               // Disable all actions within map.
///     }
///
///     #region Interface implementation of MyActions.IPlayerActions
///
///     // Invoked when "Move" action is either started, performed or canceled.
///     public void OnMove(InputAction.CallbackContext context)
///     {
///         Debug.Log($"OnMove: {context.ReadValue&lt;Vector2&gt;()}");
///     }
///
///     // Invoked when "Attack" action is either started, performed or canceled.
///     public void OnAttack(InputAction.CallbackContext context)
///     {
///         Debug.Log($"OnAttack: {context.ReadValue&lt;float&gt;()}");
///     }
///
///     #endregion
/// }
/// </code>
/// </example>
public partial class @Controls: IInputActionCollection2, IDisposable
{
    /// <summary>
    /// Provides access to the underlying asset instance.
    /// </summary>
    public InputActionAsset asset { get; }

    /// <summary>
    /// Constructs a new instance.
    /// </summary>
    public @Controls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Controls"",
    ""maps"": [
        {
            ""name"": ""Default Gameplay"",
            ""id"": ""cd36f807-016f-4d7e-9bcc-8e7a9d2b7eb5"",
            ""actions"": [
                {
                    ""name"": ""Move Camera"",
                    ""type"": ""Value"",
                    ""id"": ""c241b72d-1fdf-46f7-be7e-56ff552093bf"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""c87554bb-f8fd-4e70-bd3b-0e3b653d8908"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move Camera"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""e5433674-c426-41a4-a02d-e63989047b54"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move Camera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""e5c8cb85-f610-45e7-b773-e97ebf712e7f"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move Camera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""75c37edf-26c5-4db3-b12a-058069cf8d32"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move Camera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""18a375e6-590a-4d88-8337-b2e60012084f"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move Camera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""674d1b85-2ef7-4052-8475-29b04e65d1d7"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move Camera"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""86bf0b29-9364-493c-9d49-4efe64d1d0e2"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move Camera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""9165f6a1-d3cc-406c-8328-6ab48cfcd823"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move Camera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""0be669b4-bf17-4b4a-957e-525dc6735a70"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move Camera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""84122bd1-ae3c-41a1-bb74-b69214f11ed2"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move Camera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""Testing Mouse Camera"",
            ""id"": ""55dd9274-f9cf-41b2-ba2f-650ba004eaec"",
            ""actions"": [
                {
                    ""name"": ""ActivateMouseMovement"",
                    ""type"": ""Button"",
                    ""id"": ""25255082-92e6-4b91-9ac5-ab632fbde817"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""58d69ae6-cdb6-418f-af13-7e45218237b4"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ActivateMouseMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Default Gameplay
        m_DefaultGameplay = asset.FindActionMap("Default Gameplay", throwIfNotFound: true);
        m_DefaultGameplay_MoveCamera = m_DefaultGameplay.FindAction("Move Camera", throwIfNotFound: true);
        // Testing Mouse Camera
        m_TestingMouseCamera = asset.FindActionMap("Testing Mouse Camera", throwIfNotFound: true);
        m_TestingMouseCamera_ActivateMouseMovement = m_TestingMouseCamera.FindAction("ActivateMouseMovement", throwIfNotFound: true);
    }

    ~@Controls()
    {
        UnityEngine.Debug.Assert(!m_DefaultGameplay.enabled, "This will cause a leak and performance issues, Controls.DefaultGameplay.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_TestingMouseCamera.enabled, "This will cause a leak and performance issues, Controls.TestingMouseCamera.Disable() has not been called.");
    }

    /// <summary>
    /// Destroys this asset and all associated <see cref="InputAction"/> instances.
    /// </summary>
    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.bindingMask" />
    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.devices" />
    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.controlSchemes" />
    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Contains(InputAction)" />
    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.GetEnumerator()" />
    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    /// <inheritdoc cref="IEnumerable.GetEnumerator()" />
    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Enable()" />
    public void Enable()
    {
        asset.Enable();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Disable()" />
    public void Disable()
    {
        asset.Disable();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.bindings" />
    public IEnumerable<InputBinding> bindings => asset.bindings;

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.FindAction(string, bool)" />
    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.FindBinding(InputBinding, out InputAction)" />
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Default Gameplay
    private readonly InputActionMap m_DefaultGameplay;
    private List<IDefaultGameplayActions> m_DefaultGameplayActionsCallbackInterfaces = new List<IDefaultGameplayActions>();
    private readonly InputAction m_DefaultGameplay_MoveCamera;
    /// <summary>
    /// Provides access to input actions defined in input action map "Default Gameplay".
    /// </summary>
    public struct DefaultGameplayActions
    {
        private @Controls m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public DefaultGameplayActions(@Controls wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "DefaultGameplay/MoveCamera".
        /// </summary>
        public InputAction @MoveCamera => m_Wrapper.m_DefaultGameplay_MoveCamera;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_DefaultGameplay; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="DefaultGameplayActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(DefaultGameplayActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="DefaultGameplayActions" />
        public void AddCallbacks(IDefaultGameplayActions instance)
        {
            if (instance == null || m_Wrapper.m_DefaultGameplayActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_DefaultGameplayActionsCallbackInterfaces.Add(instance);
            @MoveCamera.started += instance.OnMoveCamera;
            @MoveCamera.performed += instance.OnMoveCamera;
            @MoveCamera.canceled += instance.OnMoveCamera;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="DefaultGameplayActions" />
        private void UnregisterCallbacks(IDefaultGameplayActions instance)
        {
            @MoveCamera.started -= instance.OnMoveCamera;
            @MoveCamera.performed -= instance.OnMoveCamera;
            @MoveCamera.canceled -= instance.OnMoveCamera;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="DefaultGameplayActions.UnregisterCallbacks(IDefaultGameplayActions)" />.
        /// </summary>
        /// <seealso cref="DefaultGameplayActions.UnregisterCallbacks(IDefaultGameplayActions)" />
        public void RemoveCallbacks(IDefaultGameplayActions instance)
        {
            if (m_Wrapper.m_DefaultGameplayActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="DefaultGameplayActions.AddCallbacks(IDefaultGameplayActions)" />
        /// <seealso cref="DefaultGameplayActions.RemoveCallbacks(IDefaultGameplayActions)" />
        /// <seealso cref="DefaultGameplayActions.UnregisterCallbacks(IDefaultGameplayActions)" />
        public void SetCallbacks(IDefaultGameplayActions instance)
        {
            foreach (var item in m_Wrapper.m_DefaultGameplayActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_DefaultGameplayActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="DefaultGameplayActions" /> instance referencing this action map.
    /// </summary>
    public DefaultGameplayActions @DefaultGameplay => new DefaultGameplayActions(this);

    // Testing Mouse Camera
    private readonly InputActionMap m_TestingMouseCamera;
    private List<ITestingMouseCameraActions> m_TestingMouseCameraActionsCallbackInterfaces = new List<ITestingMouseCameraActions>();
    private readonly InputAction m_TestingMouseCamera_ActivateMouseMovement;
    /// <summary>
    /// Provides access to input actions defined in input action map "Testing Mouse Camera".
    /// </summary>
    public struct TestingMouseCameraActions
    {
        private @Controls m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public TestingMouseCameraActions(@Controls wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "TestingMouseCamera/ActivateMouseMovement".
        /// </summary>
        public InputAction @ActivateMouseMovement => m_Wrapper.m_TestingMouseCamera_ActivateMouseMovement;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_TestingMouseCamera; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="TestingMouseCameraActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(TestingMouseCameraActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="TestingMouseCameraActions" />
        public void AddCallbacks(ITestingMouseCameraActions instance)
        {
            if (instance == null || m_Wrapper.m_TestingMouseCameraActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_TestingMouseCameraActionsCallbackInterfaces.Add(instance);
            @ActivateMouseMovement.started += instance.OnActivateMouseMovement;
            @ActivateMouseMovement.performed += instance.OnActivateMouseMovement;
            @ActivateMouseMovement.canceled += instance.OnActivateMouseMovement;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="TestingMouseCameraActions" />
        private void UnregisterCallbacks(ITestingMouseCameraActions instance)
        {
            @ActivateMouseMovement.started -= instance.OnActivateMouseMovement;
            @ActivateMouseMovement.performed -= instance.OnActivateMouseMovement;
            @ActivateMouseMovement.canceled -= instance.OnActivateMouseMovement;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="TestingMouseCameraActions.UnregisterCallbacks(ITestingMouseCameraActions)" />.
        /// </summary>
        /// <seealso cref="TestingMouseCameraActions.UnregisterCallbacks(ITestingMouseCameraActions)" />
        public void RemoveCallbacks(ITestingMouseCameraActions instance)
        {
            if (m_Wrapper.m_TestingMouseCameraActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="TestingMouseCameraActions.AddCallbacks(ITestingMouseCameraActions)" />
        /// <seealso cref="TestingMouseCameraActions.RemoveCallbacks(ITestingMouseCameraActions)" />
        /// <seealso cref="TestingMouseCameraActions.UnregisterCallbacks(ITestingMouseCameraActions)" />
        public void SetCallbacks(ITestingMouseCameraActions instance)
        {
            foreach (var item in m_Wrapper.m_TestingMouseCameraActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_TestingMouseCameraActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="TestingMouseCameraActions" /> instance referencing this action map.
    /// </summary>
    public TestingMouseCameraActions @TestingMouseCamera => new TestingMouseCameraActions(this);
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "Default Gameplay" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="DefaultGameplayActions.AddCallbacks(IDefaultGameplayActions)" />
    /// <seealso cref="DefaultGameplayActions.RemoveCallbacks(IDefaultGameplayActions)" />
    public interface IDefaultGameplayActions
    {
        /// <summary>
        /// Method invoked when associated input action "Move Camera" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnMoveCamera(InputAction.CallbackContext context);
    }
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "Testing Mouse Camera" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="TestingMouseCameraActions.AddCallbacks(ITestingMouseCameraActions)" />
    /// <seealso cref="TestingMouseCameraActions.RemoveCallbacks(ITestingMouseCameraActions)" />
    public interface ITestingMouseCameraActions
    {
        /// <summary>
        /// Method invoked when associated input action "ActivateMouseMovement" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnActivateMouseMovement(InputAction.CallbackContext context);
    }
}
